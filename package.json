{
  "name": "grunt-phpclassmap",
  "description": "Generate PHP classmap files using Grunt",
  "version": "0.0.12",
  "homepage": "https://github.com/maikelvanmaurik/grunt-phpclassmap",
  "author": {
    "name": "Maikel van Maurik",
    "email": "maikelvanmaurik@gmail.com",
    "url": "http://www.maikelvanmaurik.nl"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/maikelvanmaurik/grunt-phpclassmap.git"
  },
  "bugs": {
    "url": "https://github.com/maikelvanmaurik/grunt-phpclassmap/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/maikelvanmaurik/grunt-phpclassmap/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "handlebars": "^2.0.0-alpha.2",
    "dateformat": "^1.0.7-1.2.3",
    "underscore": "^1.8.2",
    "underscore.string": "^3.0.3"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-bump": "^0.3.0",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-jshint": "^0.9.2",
    "grunt-contrib-nodeunit": "^0.3.3"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "gruntplugin",
    "grunt task",
    "grunt",
    "generate",
    "php",
    "classmap"
  ],
  "readme": "# grunt-phpclassmap\r\n\r\n> Generate PHP classmaps\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.4`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-phpclassmap --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-phpclassmap');\r\n```\r\n\r\n## The \"phpclassmap\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `phpclassmap` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  phpclassmap: {\r\n    options: {\r\n      // Task-specific options go here.\r\n    },\r\n    your_target: {\r\n      // Target-specific file lists and/or options go here.\r\n    },\r\n  },\r\n});\r\n```\r\n\r\n### Options\r\n\r\n#### options.basedir\r\nType: `String`\r\nDefault value: .\r\n\r\nBase directory from which to create the relative paths to class files, defaults to `process.cwd`.\r\n\r\n#### options.phpbin\r\nType: `String`\r\nDefault value: 'php'\r\n\r\nPath to the php executable\r\n\r\n#### options.quote_path\r\nType: `Boolean`\r\nDefault value: true\r\n\r\nWether or not the classes in the classmap should be quoted. There might be some situations where you don't want to do that, for instance in the [filter example](#filter-example).\r\n\r\n#### options.dest\r\nType: `String`\r\nDefault value: none\r\n\r\nWhere to write the classmap file to.\r\n\r\n#### options.map\r\nType: `Function`\r\nDefault value: none\r\n\r\nFunction which maps the entry inside the destination classmap file. The function recieves a item object which in turn has the following properties:\r\n\r\n* absolute_path (absolute path to the object)\r\n* relative_path (relative path to the object, which is the absolute_path without the basedir option)\r\n* name (name of the object)\r\n* type (class, interface, trait)\r\n\r\n**IMPORTANT** The function should return the resulting item\r\n\r\n#### options.filter\r\nType: `Function`\r\nDefault value: none\r\n\r\nFunction which can be used to filter out unwanted items for the classmap, see the [filter example](#filter-example)\r\n\r\n#### options.sort\r\nType: `Function`\r\nDefault value: none\r\n\r\nFunction which allows you to sort the found classes by providing a function which will be used by the Array.prototype.sort function, see the [sort example](#sort-example)\r\n\r\n### Usage Examples\r\n\r\n#### Basic usage\r\n\r\nThe following is a basic example usage of the grunt-phpclassmap. This will scan all files under the directory `src` and will try to find all php classes.\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n        options: {\r\n            dest: './classmap.php'\r\n        },\r\n        files  : {\r\n            src   : [ 'src/**/*.php' ],\r\n            expand: true\r\n        }\r\n    },\r\n});\r\n```\r\n\r\nThe resulting `classmap.php` will look something like:\r\n\r\n```php\r\n<?php\r\n/**\r\n * Generated by grunt-phpclassmap on {{date}}\r\n */\r\nreturn array(\r\n\t\"Foo\" => \"/src/foo.class.php\",\r\n\t\"Bar\" => \"/src/class-bar.php\"\r\n);\r\n\r\n/* EOF */\r\n```\r\n\r\n#### Map items to use a defined constant\r\n\r\nIn this example, we use override the format function in order to use a defined constant inside the resulting classmap\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n        options: {\r\n\t\t\tquote_path: false,\r\n            dest: './classmap.php',\r\n            map: function(item) {\r\n                item.relative_path = 'DEFINED_BASE_PATH_CONSTANT . \"' + item.relative_path + '\"';\r\n                return item;\r\n            }\r\n        },\r\n        files  : {\r\n            src   : [ 'classes/**/*.php' ],\r\n            expand: true\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n#### Custom handlebars template\r\n\r\ngrunt-phpclassmap uses handlebars to render the classmap file, you can specify a custom handlebars template, like so:\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n        options: {\r\n            dest: './classmap.php',\r\n            template: 'my-classmap-template.tpl'\r\n        },\r\n        files  : {\r\n            src   : [ 'classes/**/*.php' ],\r\n            expand: true\r\n        }\r\n    },\r\n});\r\n```\r\n\r\ncurrenty the compiled template recieves data in the form:\r\n\r\n```js\r\n{\r\n\tquote_path: Boolean,\r\n    items: Array,\r\n    date: String\r\n}\r\n```\r\n\r\n#### Custom the render functionality\r\n\r\nbesides changing the template it's also possible to define you own render function, like so:\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n        options: {\r\n            dest: './classmap.php',\r\n            render: function(objects, cb) {\r\n                var content = '<?php\\n' +\r\n                    'return array(' +\r\n                    '%items%' +\r\n                    ');';\r\n                // Build up the item array\r\n                var items = [];\r\n                for(var i=0; i<objects.length;i++) {\r\n                    items.push('\"' + objects[i].name + '\" => \"' + objects[i].absolute_path + '\"');\r\n                }\r\n                cb(content.replace('%items%', items.join(',')));\r\n            }\r\n        },\r\n        files  : {\r\n            src   : [ 'classes/**/*.php' ],\r\n            expand: true\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n**IMPORTANT**: When you override the render method be sure to call to callback which is provided to the function, as this is the function which writes to results to the classmap.\r\n\r\n#### Custom map and render functionality\r\n\r\nIn this example you can see how you can mix the map and render function to do some custom stuff.\r\nNote that the map allows you to add additional data, which is written in de render function. This could have also been\r\ndone by providing a custom template.\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n        options: {\r\n            map: function (item) {\r\n                item.rewritten_path = your_rewrite_function(item);\r\n                return item;\r\n            },\r\n            render: function(objects, cb) {\r\n                    var content = '<?php\\n' +\r\n                                'return array(' +\r\n                                '%items%' +\r\n                                ');';\r\n                    // Build up the item array\r\n                    var items = [];\r\n                    for(var i=0; i<objects.length;i++) {\r\n                        items.push('\"' + objects[i].name + '\" => \"' + objects[i].rewritten_path) + '\"';\r\n                    }\r\n            cb(content.replace('%items%', items.join(',')));\r\n        }\r\n```\r\n\r\n#### Filter example\r\n\r\nThe filter option can be used to remove unwanted items, the function should return a `Boolean`. It should return true to include the item in the classmap; otherwise, false.\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n        options: {\r\n\t\t\tdest: 'classmap.php',\r\n            filter: function (item) {\r\n                return item.name != 'My_Unwanted_Class';\r\n            }\r\n        }\r\n\t}\r\n});\r\n```\r\n\r\n#### Sort example\r\n\r\nThe sort option can be used to sort the objects before they are written to the classmap file.\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n\t\toptions: {\r\n\t\t\tdest: './classmap.php',\r\n\t\t\tsort: function(a, b) {\r\n\t\t\t\tvar aa = a.name.toUpperCase();\r\n\t\t\t\tvar bb = b.name.toUpperCase();\r\n\t\t\t\treturn (aa < bb) ? -1 : (aa > bb) ? 1 : 0;\r\n\t\t\t}\r\n\t\t},\r\n\t\tfiles  : {\r\n            src   : [ 'src/**/*.php' ],\r\n            expand: true\r\n        }\r\n\t}\r\n}\r\n```\r\n\r\n#### Combined with grunt-contrib-watch\r\n\r\nExample of a nice way to automaticly generate classmaps during development.\r\n\r\n```js\r\ngrunt.initConfig({\r\n    phpclassmap: {\r\n        options: {\r\n\t\t\tdest: 'classmap.php',\r\n            filter: function (item) {\r\n                return item.name != 'My_Unwanted_Class';\r\n            }\r\n        },\r\n\t\tfiles  : {\r\n            src   : [ 'classes/**/*.php' ],\r\n            expand: true\r\n        }\r\n\t},\r\n\twatch: {\r\n\t\tphpclassmap: {\r\n\t\t\tfiles: ['classes/**/*.php' ],\r\n\t\t\ttasks: [ 'phpclassmap' ]\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n\r\n## Release History\r\n\r\n\r\n### Version 0.0.1\r\n\r\nInitial release\r\n\r\n### Version 0.0.2\r\n\r\nFix: added handlebars as a required dependency\r\n\r\n### Version 0.0.3\r\n\r\nFix: added dateformat as a required dependency\r\n\r\n### Version 0.0.4\r\n\r\nFix: remove some debug statements\r\nFix: typo in the default template comments\r\n\r\n### Version 0.0.5\r\n\r\nFix: correct stupid mistake of writing the classmap inside a loop\r\nUpdate: add the quote_path option\r\nUpdate: the default template to use the quote_path\r\n\r\n### Version 0.0.6\r\n\r\nUpdate: add the map option for changing the item\r\nChange: change the existing filter option functionality to filter found entries\r\n\r\n### Version 0.0.7\r\n\r\nUpdate: add the sort option\r\nUpdate: provide better feedback of the found classmap results",
  "readmeFilename": "README.md",
  "_id": "grunt-phpclassmap@0.0.7",
  "_shasum": "9dfc4d4743d24ad850b78bb74fca54b75da7dfd9",
  "_from": "grunt-phpclassmap@0.0.7",
  "_resolved": "https://registry.npmjs.org/grunt-phpclassmap/-/grunt-phpclassmap-0.0.7.tgz"
}
